package org.hipi.examples;

//Link : http://users.ecs.soton.ac.uk/msn/book/new_demo/fourier/

import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.image.PixelGrabber;
import java.io.File;

import javax.imageio.ImageIO;

public class FourierAndInverseFourier {

    PixelGrabber grabber = null;
    static String fileName = "/home/hgkumbhare/Desktop/download.png";

    int imageNumber = 0;
    static int progress = 0;
    public static float origFloat[] = null;
    public static FFT fft = new FFT();
    public static InverseFFT inverse = new InverseFFT();

    static Image myImage = null;

    static boolean lowpass = true;
    
    public static  BufferedImage resizeImage(BufferedImage image, int width, int height) {
	// Link : https://stackoverflow.com/questions/16497853/scale-a-bufferedimage-the-fastest-and-easiest-way
        int type=0;
       type = image.getType() == 0? BufferedImage.TYPE_INT_ARGB : image.getType();
       BufferedImage resizedImage = new BufferedImage(width, height,type);
       Graphics2D g = resizedImage.createGraphics();
       g.drawImage(image, 0, 0, width, height, null);
       g.dispose();
       return resizedImage;
    }
    
    public static Image FFT(String fileName)
    {
	BufferedImage outputImage = null;
	try{
	BufferedImage inputImage = ImageIO.read(new File(fileName));
	    
	    BufferedImage myImage = resizeImage(inputImage,256,256);

	    int[] orig = new int[myImage.getWidth() * myImage.getHeight()];
	    PixelGrabber grabber = new PixelGrabber(myImage, 0, 0, myImage.getWidth(),
		    height, orig, 0, myImage.getWidth());

	    try {
		grabber.grabPixels();
	    } catch (InterruptedException e2) {
		System.out.println("error: " + e2);
	    }

	    fft = new FFT(orig, myImage.getWidth(), height);
	    fft.intermediate = FreqFilter
		    .filter(fft.intermediate, lowpass, 100);
	    
	    System.out.println(String.valueOf(String.valueOf(myImage.getWidth())+"  "+String.valueOf(myImage.getWidth() * height)
		    + "   " + fft.getPixels().length));

	    outputImage = new BufferedImage(myImage.getWidth(), height,
		    BufferedImage.TYPE_INT_RGB);
	    outputImage.setRGB(0, 0, myImage.getWidth(), height, fft.getPixels(), 0, width);
	    ImageIO.write(outputImage, "jpg", new File("/home/hgkumbhare/hogaya.jpg"));
	}
	catch(Exception e)
	{
	    System.out.println(e);
	}
	return outputImage;
    }

    public static void main(String[] args) throws Exception {
	try {
	    System.out.println("STARTED");
	    

	    // Inverse Fourier
	   TwoDArray output = inverse.transform(fft.intermediate);
	   System.out.println(String.valueOf(output.height * output.width));

	   BufferedImage newImage1 = new BufferedImage(width, height,
		    BufferedImage.TYPE_INT_RGB);
	   newImage1.setRGB(0, 0, width, height, inverse.getPixels(output) , 0, width);
	   ImageIO.write(newImage1, "jpg", new File("/home/hgkumbhare/outputimage.jpg"));
	// final Image invFourier = createImage(new MemoryImageSource(output.width, output.height,
	// inverse.getPixels(output), 0, output.width));
	    
	} catch (Exception e) {
	    System.out.print("NAHI HUA" + e);
	}
	System.out.println("DONE");
    }

}