package org.hipi.examples;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;

import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;
import org.hipi.image.FloatImage;
import org.hipi.image.HipiImageHeader;
import org.hipi.imagebundle.mapreduce.HibInputFormat;

public class Sliding extends Configured implements Tool {

	public static class HelloWorldMapper extends
			Mapper<HipiImageHeader, FloatImage, IntWritable, FloatImage> {
		public void map(HipiImageHeader key, FloatImage value, Context context)
				throws IOException, InterruptedException {
			context.write(new IntWritable(1), value);
		}
	}

	public static class HelloWorldReducer extends
			Reducer<IntWritable, FloatImage, IntWritable, IntWritable> {
		public void reduce(IntWritable key, Iterable<FloatImage> values,
				Context context) throws IOException, InterruptedException {
			int index = 1;
			for (FloatImage value : values) {
				int width = value.getWidth();
				int height = value.getHeight();
				int number_of_bands = 3; // for now hardcoded
				float[] dataBuff = value.getData();

				// object to handle and manipulate the image data
				BufferedImage image = new BufferedImage(width, height,
						BufferedImage.TYPE_INT_RGB);

				for (int i = 0; i < height; ++i) {
					for (int j = 0; j < width; ++j) {
						if (number_of_bands == 3) {
							int r = Math.round(dataBuff[3 * (i
									* value.getWidth() + j)]
									* (float) 255.0);
							int g = Math.round(dataBuff[3 * (i
									* value.getWidth() + j) + 1]
									* (float) 255.0);
							int b = Math.round(dataBuff[3 * (i
									* value.getWidth() + j) + 2]
									* (float) 255.0);
							int gray = r << 16 | g << 8 | b;
							image.setRGB(j, i, gray);
						} else if (number_of_bands == 1) {
							int val = Math
									.round(dataBuff[(i * value.getWidth() + j)]
											* (float) 255.0);
							image.setRGB(j, i, val);
						} else {
							System.out.println("ERROR1");
							throw new IllegalArgumentException(
									"Invalid FloatImage");
						}
					}
				}
				// writing image in output directory given in jpeg format

				// output directory needs to be mentioned.
				ImageIO.write(image, "jpg", new File("/home/hduser/lalaoutput/",
						Integer.toString(index) + ".jpg"));
				context.write(new IntWritable(index), new IntWritable(index));
				index++;
			}
		}
	}

	public int run(String[] args) throws Exception {
		// Check input arguments
		if (args.length != 2) {
			System.out
					.println("Usage: helloWorld <input HIB> <output directory>");
			System.exit(0);
		}

		// Initialize and configure MapReduce job
		Job job = Job.getInstance();
		// Set input format class which parses the input HIB and spawns map
		// tasks
		job.setInputFormatClass(HibInputFormat.class);
		// Set the driver, mapper, and reducer classes which express the
		// computation
		job.setJarByClass(HelloWorld.class);
		job.setMapperClass(HelloWorldMapper.class);
		job.setReducerClass(HelloWorldReducer.class);
		// Set the types for the key/value pairs passed to/from map and reduce
		// layers
		job.setMapOutputKeyClass(IntWritable.class);
		job.setMapOutputValueClass(FloatImage.class);
		job.setOutputKeyClass(IntWritable.class);
		job.setOutputValueClass(IntWritable.class);

		// Set the input and output paths on the HDFS
		FileInputFormat.setInputPaths(job, new Path(args[0]));
		FileOutputFormat.setOutputPath(job, new Path(args[1]));

		// Execute the MapReduce job and block until it complets
		boolean success = job.waitForCompletion(true);

		// Return success or failure
		return success ? 0 : 1;
	}

	public static void main(String[] args) throws Exception {
		ToolRunner.run(new HelloWorld(), args);
		System.exit(0);
	}

}
