package org.hipi.examples;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.awt.image.DataBuffer;
import org.hipi.image.FloatImage;
import org.hipi.image.HipiImageHeader;
import org.hipi.imagebundle.mapreduce.HibInputFormat;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.Path;

import java.nio.*;

import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;

import java.awt.image.DataBufferByte;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataOutput;

import javax.imageio.ImageIO;

import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.Writable;

public class HelloWorld extends Configured implements Tool {

	public static int index = 1;

	public static class HelloWorldMapper extends
			Mapper<HipiImageHeader, FloatImage, IntWritable, FloatImage> {
		public void map(HipiImageHeader key, FloatImage value, Context context)
				throws IOException, InterruptedException {
			context.write(new IntWritable(index), value);
			index++;
		}
	}

	public static class HelloWorldReducer extends
			Reducer<IntWritable, FloatImage, IntWritable, IntWritable> {
		public void reduce(IntWritable key, Iterable<FloatImage> values,
				Context context) throws IOException, InterruptedException {

			for (FloatImage value : values) {
				// Float Image to Buffered Image

				float[] dataBuff = value.getData();

				BufferedImage bufferedImage = new BufferedImage(
						value.getWidth(), value.getHeight(),
						BufferedImage.TYPE_INT_RGB);
				// bufferedImage.setRGB(0, 0, dataBuff);

				for (int i = 0; i < value.getHeight(); i++) {

					for (int j = 0; j < value.getWidth(); j++) {
						/*
						int red = (int) (dataBuff[3 * i] * 0.299);
						int green = (int) (dataBuff[3 * i + 1] * 0.587);
						int blue = (int) (dataBuff[3 * i + 2] * 0.114);
						Color newColor = new Color(red + green + blue, red
								+ green + blue, red + green + blue);
							*/
						int r = (int)(dataBuff[3 * i] * 255.0); // red component 0...255
						int g = (int)(dataBuff[3 * i + 1] *255.0); // green component 0...255
						int b = (int)(dataBuff[3 * i + 2] *255.0); // blue component 0...255
						//int a = // alpha (transparency) component 0...255
						int col = (r << 16) | (g << 8) | b;
						bufferedImage.setRGB(j, i, col);
								
						//bufferedImage.setRGB(j, i, newColor.getRGB());
					}
				}

				// Buffered Image to Float Image

				int w = bufferedImage.getWidth();
				int h = bufferedImage.getHeight();
				
				DataBuffer dataBuffer = bufferedImage.getRaster()
						.getDataBuffer();
				float[] pixels = new float[w * h];
				for (int i = 0; i < w * h; i++) {
					pixels[i] = dataBuffer.getElemFloat(i);
				}
				FloatImage floatImage = new FloatImage(
						bufferedImage.getWidth(), bufferedImage.getHeight(), 1,
						pixels);

				// Write Float Image to File
				w = floatImage.getWidth();
				h = floatImage.getHeight();
				float[] valData = floatImage.getData();
				float temp;

				BufferedWriter q = new BufferedWriter(new FileWriter(
						"/home/hduser/sample-rgb.txt", true));

				q.write(String.valueOf(h));
				q.write("\n");
				q.write(String.valueOf(w));
				q.write("\n");
				q.write("1\n");

				int bands=1;
				for (int j = 0; j < h; j++) {
					for (int i = 0; i < w; i++) {
						// try to do 2 in 1
						temp = (int) (valData[(j * w + i) * bands + 0] * 255);
						q.write(String.valueOf(temp));
						q.write(" ");
						temp = (int) (valData[(j * w + i) * bands + 1] * 255);
						q.write(String.valueOf(temp));
						q.write(" ");
						temp = (int) (valData[(j * w + i) * bands + 2] * 255);
						q.write(String.valueOf(temp));
						q.write(" ");
					}
				}
				q.write("\n");
				q.close();
				context.write(new IntWritable(index), new IntWritable(index));
				index++;
			}
		}
	}

	public int run(String[] args) throws Exception {
		// Check input arguments
		if (args.length != 2) {
			System.out
					.println("Usage: helloWorld <input HIB> <output directory>");
			System.exit(0);
		}

		// Initialize and configure MapReduce job
		Job job = Job.getInstance();
		// Set input format class which parses the input HIB and spawns map
		// tasks
		job.setInputFormatClass(HibInputFormat.class);
		// Set the driver, mapper, and reducer classes which express the
		// computation
		job.setJarByClass(HelloWorld.class);
		job.setMapperClass(HelloWorldMapper.class);
		job.setReducerClass(HelloWorldReducer.class);
		// Set the types for the key/value pairs passed to/from map and reduce
		// layers
		job.setMapOutputKeyClass(IntWritable.class);
		job.setMapOutputValueClass(FloatImage.class);
		job.setOutputKeyClass(IntWritable.class);
		job.setOutputValueClass(IntWritable.class);

		// Set the input and output paths on the HDFS
		FileInputFormat.setInputPaths(job, new Path(args[0]));
		FileOutputFormat.setOutputPath(job, new Path(args[1]));

		// Execute the MapReduce job and block until it complets
		boolean success = job.waitForCompletion(true);

		// Return success or failure
		return success ? 0 : 1;
	}

	public static void main(String[] args) throws Exception {
		ToolRunner.run(new HelloWorld(), args);
		System.exit(0);
	}

	public static float[] toFloatArray(byte[] byteArray) {
		int times = Float.SIZE / Byte.SIZE;
		float[] floats = new float[byteArray.length / times];
		for (int i = 0; i < floats.length; i++) {
			floats[i] = ByteBuffer.wrap(byteArray, i * times, times).getFloat();
		}
		return floats;
	}

	public static float[] intToFloatArray(int[] ints) {
		float[] floats = new float[ints.length];
		for(int i=0; i<ints.length; i++) {
    			floats[i] = ints[i];
		}
		return floats;
	}

	static abstract class ImageWritable<I> implements Writable {

		protected I im;
		protected String fileName;
		protected String format;

		public I getImage() {
			return im;
		}

		public String getFormat() {
			return format;
		}

		public void write(DataOutput out) throws IOException {
			// Write image type
			Text.writeString(out, format);
			// Write image file name
			Text.writeString(out, fileName);
		}

		public void readFields(DataInput in) throws IOException {
			// Read image type
			format = Text.readString(in);
			// Read image file name
			fileName = Text.readString(in);
		}

		public String getFileName() {
			return fileName;
		}

		public void setFileName(String fName) {
			fileName = fName;
		}

		public void setFormat(String fFormat) {
			format = fFormat;
		}

		public void setImage(I bi) {
			im = bi;
		}
	}

	static class BufferedImageWritable extends ImageWritable<BufferedImage> {

		public BufferedImageWritable() {

		}

		public BufferedImageWritable(BufferedImage _im) {
			this();
			im = _im;
		}

		public BufferedImageWritable(BufferedImage _im, String _filename,
				String _format) {
			this(_im);
			fileName = _filename;
			format = _format;
		}

		@Override
		public void write(DataOutput out) throws IOException {
			super.write(out);

			// Write image
			// Convert image to byte array
			ByteArrayOutputStream baos = new ByteArrayOutputStream();
			ImageIO.write(im, this.getFormat(), baos);
			baos.flush();
			byte[] bytes = baos.toByteArray();
			baos.close();
			// Write byte array size
			out.writeInt(bytes.length);
			// Write image bytes
			out.write(bytes);
		}

		@Override
		public void readFields(DataInput in) throws IOException {
			super.readFields(in);

			// Read image byte array size
			int bArraySize = in.readInt();
			// Read image byte array
			byte[] bArray = new byte[bArraySize];
			in.readFully(bArray);
			// Read image from byte array
			im = ImageIO.read(new ByteArrayInputStream(bArray));
		}
	}

}
