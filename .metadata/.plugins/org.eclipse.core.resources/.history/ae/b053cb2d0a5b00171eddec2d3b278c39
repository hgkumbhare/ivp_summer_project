package org.hipi.intraframe;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;

import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;
import org.hipi.image.FloatImage;
import org.hipi.image.HipiImageHeader;
import org.hipi.imagebundle.mapreduce.HibInputFormat;

public class IntraFrame extends Configured implements Tool {

	public static int index = 1;

	public static class HelloWorldMapper extends Mapper<HipiImageHeader, FloatImage, IntWritable, FloatImage> 
	{
		public void map(HipiImageHeader key, FloatImage value, Context context) throws IOException, InterruptedException 
		{

			context.write(new IntWritable(1), value);
			index++;
		}
	}

	public static class HelloWorldReducer extends Reducer<IntWritable, FloatImage, IntWritable, IntWritable> 
	{
		public void reduce(IntWritable key, Iterable<FloatImage> values,Context context) throws IOException, InterruptedException 
		{
			int index = 1;
			for (FloatImage value : values) 
			{	
			    float[] dataBuff = value.getData();

				BufferedImage bufferedImage = new BufferedImage(value.getWidth(), value.getHeight(),BufferedImage.TYPE_INT_RGB);
				
				// Hipi gives input images in FloatImage format.
				// Before processing these images we need to convert them into a format that allows us to perform basic image procesing.
				// Convert FloatImage to BufferedImage.			
				for (int i = 0; i < value.getHeight(); i++) 
				{
					for (int j = 0; j < value.getWidth(); j++) 
					{
						// red component of pixel
						int r = Math.round(dataBuff[3 * (i * value.getWidth() +j)] * (float)255.0); 
						// green component of pixel
						int g = Math.round(dataBuff[3 * (i * value.getWidth()+j) + 1] * (float)255.0); 
						// blue component of pixel
						int b = Math.round(dataBuff[3 * (i * value.getWidth() +j) + 2] * (float)255.0); 
						
						//value of the Buffered Image pixel calculated from the rgb values of the FloatImage
						int val = (r << 16) | (g << 8) | b;
						bufferedImage.setRGB(j, i, val);
					}
				}
				// writing image in output directory given in jpeg format
				
				//output directory needs to be mentioned.
				ImageIO.write(bufferedImage, "jpg",new File("/home/hduser/"+ Integer.toString(index) + ".jpg"));
				context.write(new IntWritable(index), new IntWritable(index));
				index++;
			}
		}
	}

	public int run(String[] args) throws Exception 
	{
		// Check input arguments
		if (args.length != 2) 
		{
			System.out.println("Usage: helloWorld <input HIB> <output directory>");
			System.exit(0);
		}

		// Initialize and configure MapReduce job
		Job job = Job.getInstance();
		// Set input format class which parses the input HIB and spawns map
		// tasks
		job.setInputFormatClass(HibInputFormat.class);
		// Set the driver, mapper, and reducer classes which express the
		// computation
		job.setJarByClass(IntraFrame.class);
		job.setMapperClass(HelloWorldMapper.class);
		job.setReducerClass(HelloWorldReducer.class);
		// Set the types for the key/value pairs passed to/from map and reduce
		// layers
		job.setMapOutputKeyClass(IntWritable.class);
		job.setMapOutputValueClass(FloatImage.class);
		job.setOutputKeyClass(IntWritable.class);
		job.setOutputValueClass(IntWritable.class);

		// Set the input and output paths on the HDFS
		FileInputFormat.setInputPaths(job, new Path(args[0]));
		FileOutputFormat.setOutputPath(job, new Path(args[1]));

		// Execute the MapReduce job and block until it complets
		boolean success = job.waitForCompletion(true);

		// Return success or failure
		return success ? 0 : 1;
	}

	public static void main(String[] args) throws Exception 
	{
		ToolRunner.run(new IntraFrame(), args);
		System.exit(0);
	}

}