package org.hipi.examples;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;

public class SlidingMerge {

	public static void main(String args[]) throws IOException {

		if (args.length != 4) {
			System.out
					.println("Usage: InputPath imageOutput Number of nodes filterSize");
			System.exit(0);
		}
		String inputPath = args[0];
		String imageOutput = args[1];
		int nodes = Integer.valueOf(args[2]);
		int borderSize = Integer.valueOf(args[3]) / 2;

		BufferedImage image = null;
		File f = null;

		// read image
		try {

			// To read image with borders
			// For Image 1
			f = new File(inputPath + "/" + String.valueOf(1) + ".jpg");
			BufferedImage image1 = ImageIO.read(f);
			// Final Image to be output - image
			BufferedImage bufferedImage = new BufferedImage(
					(image1.getWidth() - borderSize * 2) * 2,
					(image1.getHeight() - borderSize * 2) * 2,
					BufferedImage.TYPE_INT_RGB);
			int[] pixels = image1.getRGB(borderSize, borderSize,
					image1.getWidth() - borderSize * 2, image1.getHeight()
							- borderSize * 2, null, 0, image1.getWidth());
			image.setRGB(0, 0, image1.getWidth() - 2 * borderSize,
					image1.getHeight() - 2 * borderSize, pixels, 0,
					image1.getWidth());

			/*
			 * 
			 * BufferedImage subImage; f = new File(outputPath + "/" +
			 * String.valueOf(1) + ".jpg"); subImage = image1.getSubimage(0, 0,
			 * width / 2 + borderSize * 2, height / 2 + borderSize * 2);
			 * ImageIO.write(subImage, "jpg", f);
			 * 
			 * f = new File(inputPath + "/" + String.valueOf(2) + ".jpg");
			 * subImage2 = image1.getSubimage(width / 2, 0, width / 2 +
			 * borderSize 2, height / 2 + borderSize * 2);
			 * ImageIO.write(subImage, "jpg", f);
			 * 
			 * f = new File(inputPath + "/" + String.valueOf(3) + ".jpg");
			 * subImage = image1.getSubimage(0, height / 2, width / 2 +
			 * borderSize 2, height / 2 + borderSize * 2);
			 * ImageIO.write(subImage, "jpg", f);
			 * 
			 * f = new File(outputPath + "/" + String.valueOf(4) + ".jpg");
			 * subImage = image1.getSubimage(width / 2, (height / 2), width / 2
			 * + borderSize * 2, height / 2 + borderSize * 2);
			 * ImageIO.write(subImage, "jpg", f);
			 * 
			 * System.out.println("Reading complete.");
			 */

			f = new File(imageOutput);
			ImageIO.write(image, "jpg", f);

			System.out.println("Writing complete.");
		} catch (IOException e) {
			System.out.println("Error: " + e);
		}

	}

	private static BufferedImage addborder(BufferedImage image, int borderSize) {
		BufferedImage image1 = new BufferedImage(image.getWidth() + borderSize
				* 2, image.getHeight() + borderSize * 2,
				BufferedImage.TYPE_INT_RGB);
		int[] pixels = image.getRGB(0, 0, image.getWidth(), image.getHeight(),
				null, 0, image.getWidth());
		image1.setRGB(borderSize, borderSize, image.getWidth(),
				image.getHeight(), pixels, 0, image.getWidth());
		return image1;
	}
}